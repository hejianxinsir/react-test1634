{"version":3,"sources":["TodoInput.js","TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","className","type","value","this","props","content","onKeyPress","submit","bind","onChange","changeTitle","e","key","console","log","onSubmit","React","Component","TodoItem","checked","todo","status","toggle","title","onClick","delete","onToggle","onDelete","App","state","newTodo","todoList","todos","filter","item","deleted","map","index","addTodo","event","push","id","idMaker","target","setState","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAGqBA,G,mLAGjB,OACI,2BACIC,UAAU,YACVC,KAAK,OACLC,MAAOC,KAAKC,MAAMC,QAClBC,WAAYH,KAAKI,OAAOC,KAAKL,MAC7BM,SAAUN,KAAKO,YAAYF,KAAKL,U,6BAKnCQ,GAEQ,UAAVA,EAAEC,MACHC,QAAQC,IAAI,wCAFFX,KAGJC,MAAMW,SAASJ,M,kCAIbA,GACVR,KAAKC,MAAMK,SAASE,O,GAvBeK,IAAMC,YCAxBC,G,6KAEjB,OACE,yBAAKlB,UAAU,YACb,2BAAOC,KAAK,WACRkB,QAAoC,cAA3BhB,KAAKC,MAAMgB,KAAKC,OACzBZ,SAAUN,KAAKmB,OAAOd,KAAKL,QAC7B,0BAAMH,UAAU,SAASG,KAAKC,MAAMgB,KAAKG,OAC3C,4BAAQC,QAASrB,KAAKsB,OAAOjB,KAAKL,OAAlC,Q,6BAKCQ,GACLR,KAAKC,MAAMsB,SAASf,EAAGR,KAAKC,MAAMgB,Q,6BAE7BT,GACLR,KAAKC,MAAMuB,SAAShB,EAAGR,KAAKC,MAAMgB,U,GAjBAH,cC6EvBW,E,kDAxEb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,QAAS,GACTC,SAAU,IAJD,E,qDAUJ,IAAD,OACFC,EAAQ7B,KAAK0B,MAAME,SACpBE,QAAO,SAACC,GAAD,OAA0B,IAAjBA,EAAKC,WACrBC,KAAI,SAACF,EAAMG,GACZ,OACE,wBAAIzB,IAAKyB,GACP,kBAAC,EAAD,CAAUjB,KAAMc,EAAMR,SAAU,EAAKJ,OAAOd,KAAK,GAC/CmB,SAAU,EAAKF,OAAOjB,KAAK,SAOnC,OAFAK,QAAQC,IAAI,iBAAakB,GAGvB,yBAAKhC,UAAU,OACb,wDACA,kBAAC,EAAD,CAAWK,QAASF,KAAK0B,MAAMC,QAC3Bf,SAAUZ,KAAKmC,QAAQ9B,KAAKL,MAC5BM,SAAUN,KAAKO,YAAYF,KAAKL,QAEpC,4BACG6B,M,8BAMDO,GACN1B,QAAQC,IAAI,oDACTX,KAAK0B,MAAMC,SACZ3B,KAAK0B,MAAME,SAASS,KAAK,CACvBC,GAAIC,IACJnB,MAAOgB,EAAMI,OAAOzC,MACpBmB,OAAQ,KACRc,SAAS,IAGXhC,KAAKyC,SAAS,CACZd,QAAS,GACTC,SAAU5B,KAAK0B,MAAME,YAGvBc,MAAM,oC,kCAGEN,GACVpC,KAAKyC,SAAS,CACZd,QAASS,EAAMI,OAAOzC,MACtB6B,SAAU5B,KAAK0B,MAAME,a,6BAGlBpB,EAAGS,GACRA,EAAKC,OAAyB,cAAhBD,EAAKC,OAAyB,GAAK,YACjDlB,KAAKyC,SAASzC,KAAK0B,S,6BAEdU,EAAOnB,GACZA,EAAKe,SAAU,EACfhC,KAAKyC,SAASzC,KAAK0B,W,GArELb,IAAMC,WA2EpBwB,EAAK,EAET,SAASC,IAEP,OADAD,GAAM,ECzEYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.eaa9b4a2.chunk.js","sourcesContent":["import React from 'react'\nimport './TodoInput.css'\n\nexport default class TodoInput extends React.Component {\n\n  render(){\n    return (\n        <input\n            className=\"TodoInput\"\n            type=\"text\"\n            value={this.props.content}\n            onKeyPress={this.submit.bind(this)}\n            onChange={this.changeTitle.bind(this)}\n        />\n    )\n  }\n\n  submit(e){\n    let _this = this\n    if(e.key === 'Enter'){\n      console.log('用户按回车了')\n      _this.props.onSubmit(e)\n    }\n  }\n\n  changeTitle(e){\n    this.props.onChange(e)\n  }\n}","import React, {Component} from 'react'\nimport './TodoItem.css'\n\nexport default class TodoItem extends Component{\n  render(){\n    return (\n      <div className=\"todoItem\">\n        <input type=\"checkbox\"\n            checked={this.props.todo.status === 'completed'}\n            onChange={this.toggle.bind(this)}\n        /><span className=\"title\">{this.props.todo.title}</span>\n        <button onClick={this.delete.bind(this)}>x</button>\n      </div>\n    )\n  }\n\n  toggle(e){\n    this.props.onToggle(e, this.props.todo)\n  }\n  delete(e){\n    this.props.onDelete(e, this.props.todo)\n  }\n}","import React from 'react'\nimport './App.css'\n\nimport TodoInput from './TodoInput.js'\nimport TodoItem from './TodoItem.js'\n\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      newTodo: '',\n      todoList: [\n\n      ]\n    }\n  }\n\n  render(){\n    let todos = this.state.todoList\n      .filter((item)=> item.deleted === false)  \n      .map((item, index)=>{\n      return (\n        <li key={index}>\n          <TodoItem todo={item} onToggle={this.toggle.bind(this)}\n            onDelete={this.delete.bind(this)}\n          />\n        </li>\n      )\n    })\n    console.log('todos 是: ', todos)\n\n    return (\n      <div className=\"app\">\n        <h1>我的代办</h1>\n        <TodoInput content={this.state.newTodo}\n            onSubmit={this.addTodo.bind(this)}\n            onChange={this.changeTitle.bind(this)}\n        />\n        <ol>\n          {todos}\n        </ol>\n      </div>\n    )\n  }\n\n  addTodo(event){\n    console.log('我得添加一个 todo 了')\n    if(this.state.newTodo){\n      this.state.todoList.push({\n        id: idMaker(),\n        title: event.target.value,\n        status: null,\n        deleted: false\n      })\n\n      this.setState({\n        newTodo: '',\n        todoList: this.state.todoList\n      })\n    }else{\n      alert('请输入内容')\n    }\n  }\n  changeTitle(event){\n    this.setState({\n      newTodo: event.target.value,\n      todoList: this.state.todoList\n    })\n  }\n  toggle(e, todo){\n    todo.status = todo.status === 'completed' ? '' : 'completed'\n    this.setState(this.state)\n  }\n  delete(event, todo){\n    todo.deleted = true\n    this.setState(this.state)\n  }\n}\n\nexport default App;\n\nlet id = 0\n\nfunction idMaker(){\n  id += 1\n  return id\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister();\n"],"sourceRoot":""}